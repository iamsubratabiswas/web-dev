/* HOVER */
        .special:hover
         input:focus
         li:first-child
          li:nth-child(2n+1)

          a:visited{
     color: violet;
 }



 /* Pseudo element "::" and inside content: ; */

h2::before{
    content: "Hello "; /*to add Hello before every h2*/
    color: burlywood;
}

       .bye::after


      /* Counter */


body{
    counter-reset: countkari; /*setting a coutnter by a name*/
}
p::before{
    counter-increment: countkari; /*incrementing counter*/
    content: "Hello " counter(countkari ) " : "; /*displaying counter*/
}



 /*static:not affected by left,right,top,bottom, default is static 1st,6th
     
     relative:position is relative to it normal position, 2nd

     absolute:respect to the nearest positioned ancestor (first occurence of viewport) if we use left,right....etc otherwise 
           virtually in normal space like roof on earth,no space take,3rd

    fixed:relative to viewport if we use left,right....etc 
          otherwise stay virtually in normal position like floating cloud in sky,no space take 4th

     sticky:combinatiion of relative and fixed ,fifth

     position: relative;
    left: 80px;
*/


<!-- some sortcut keys
ul>li.item$*3{}     //">"=inside_tag   "#" =id      "."=class,
                     $=increment,"*"=total num, {}=inside text
eg: ul>li*7{child $}
-->


/* power of CSS
!important > inline > id > class > embeded
 after this read about overflow,mediaquery,bootstrap,css animation,transition,css3,css selecor
 */

  <!-- to remove image backgraound: www.inpixio.com
to add backgroud: photopea  
if we float div inside section then section width will be Zero ,so we need to give height for section to disply background image inside section
according to size background image may be multiplied,so we shoud stop backgroud repeat

background-image: url("images/banner.png");
    background-repeat: no-repeat;

     text-decoration: none; /*to remove by default uderscore of anchor link*/

     background-image: linear-gradient(45deg, lightsalmon ,tomato );  /*if we dont xternal image no need to url*/
     padding: 10px 20px; 

      box-shadow: 10px 10px 40px violet;  
     /* at least two value (right, down,spreading, color) */


      border-image: linear-gradient(180deg, lightsalmon,tomato);
   border-image-slice: 1;


 background-image: url("images/headerbg.png"); 
 background-repeat: no-repeat;
 background-size: 100% 100%;


 <div class="button onefifth">
        <p class="tiny">Leave me a message in the</p>
    <a class="white" href=" mailto: subrotobiswas53@gmail.com">subrotobiswas53@gmail.com</a>



tag name: table=> thead(tr,th),tbody(tr=row,td=data)
css for table
table{
     border-collapse: collapse;
     }
td,th{ /*same time in two tag css*/
        border: 1px solid lightgray;
        padding: 0 10px;
    }

html for table
    <table>
        <caption></caption>
        <thead>
            <tr>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>


    form and Radio:
 <!-- fieldset to give a boudary line around all options and legend is
  description of choices-->
             <legend>i am legend from fielset to p(radio)</legend>
             <!-- we must label for tag to select radio by tapping
              anywhere in te lines p>label>input type=radio it select one 
              of the same name field-->

p>label>input:radio

<form action="">
             <legend>select option below </legend>
             <p><label for="lamborgini"><input type="radio" name="car" id="lamborgini">select lamborgini</label></p>
         </form>

<h1>CHECKBOX</h1>

         <fieldset>
             p*3>label>input:checkbox

         </fieldset>


         <fieldset>
             <legend>select yor books</legend>
             <p><label for=""><input type="checkbox" name="" id=""></label></p>
             <p><label for=""><input type="checkbox" name="" id=""></label></p>
             <p><label for=""><input type="checkbox" name="" id=""></label></p>

         </fieldset>



 //special text area in paragraph to write something more
   p>label>textarea :
<p><label for="">special instructons : <textarea name="" id="" cols="30" rows="10"></textarea></label></p>


//submit button
button:submit :
 <button type="submit">SUBMIT</button>


 //we can add placeholder inside input to view wateermark, pattern etc we will know more in react


 //title
  <h1 title="Read my 2nd blog">blog 2</h1> 
  view atrribute lists to earn more


     visibility: hidden; //to hide contents

     <!-- overflow: element goes beyond its allocated area ,to stop 
     overflow:(hidden,scroll,visible,auto) overflow x,y,-->

     //favicon:special link inside head
     link:favicon

     <link rel="shortcut icon" href="images/favicon/favicon.ico" type="image/x-icon">

//transform
    transform: scale(.5);
    transform: translate(100px);
    /* last transform will be applicable ,to use more than one transform use belo */
    transform:rotate(45deg) scale(.5) translate(80px);



//transition //multiple waywe cant trasition all css properties
//some properties height,width,background color etc works

    transiton: <property> <duration> <timing-funcction> <delay>

eg:
    #delay{
        font-size: 14px;
        transition-property: font-size;
        transition-duration: 4s;
        transition-delay: 2;
        }

    #delay:hover{
        font-size:36px;
                }

//another way: single line

prectical example of:
            .transit{
            background-color: lightyellow;
            transition: background-color 5s ease 1s;  
                    }

.transit:hover{
            background-color:red ;
              }



//example bat ball transform and transition
/* Transform an transition in bat ball */

.bat{
transition: transform .4s ease-in-out;
/* delay doesnt need to set if wwe dont want delay */
    }

.bat:hover{
    transform:rotate(-60deg) ;
    transform-origin: 100% 0%;    /*x axis 100% upper axis:0%*/
          }

.ball{
    transition: transform .5s ease-in-out .5s;
    }

/* we want to use total .field:hover on .ball ,if we hover .filed then property change on .ball */

.field:hover .ball{
    transform: translate(900px,-400px);
    /* x axis,y axis */
}




//ANIMATION EXAMPLE BOUNCING ball

/*ANIMATION BOUNCING BALL  */
 /*to lern more w3schools,mozila css animation properties
 *keyframes name{ 0%{}  25%{} 50%{} 75%{} 100%{} } etc
    animation: name duration timing-function delay iteration-count direction fill-mode; */
//mod7_1



@keyframes bouncekari {
                       from{

                           }

                       to{

                         }
                     }


 .stage:hover .tennis
{
    /* animation: name duration timing-function delay iteration-count direction fill-mode; */
    animation: bouncekari 5s ease-in-out 2s infinite alternate;    
}

//SOME more
ease-in will start the animation slowly, and finish at full speed.
ease-out will start the animation at full speed, then finish slowly.
ease-in-out will start slowly, be fastest at the middle of the animation, then finish slowly.
ease is like ease-in-out, except it starts slightly faster than it ends.
linear uses no easing.
 the steps() timing function, acts like linear





//FLEXBOX:

 display: flex;
 justify-content:center;
 justify-content:flex-end
 justify-content:space-between
 justify-content:space-evenly;
  margin-left:auto;
   flex:1;
   flex-direction:column;
   flex-direction:column;
            align-items:center;

flex-wrap: wrap; //display responsively according to the screen size



//CSS GRID
In terms of when to specifically use Grid versus Flexbox, there are two things to take into consideration:

A two-dimensional or one-dimensional layout.
A layout-first or content-first approach.

TYPES: explicit, implicit 
Grid lines are the vertical and horizontal lines =COL OR ROW PLUS 1
grid track is the space between two grid lines.= columns and rows.



.grid-container {
  display: grid; //activating grid

  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(2, 170px);

/*  Setting column and row gaps,number and size of grid tracks   */
  grid-column-gap: 40px;
  grid-row-gap: 40px;

/*  Shorthand     grid-gap: 40px; if differnt then grid-gap:40px 30px;  */ 

}


 /* Columns & Rows | Method 1
    grid-template-columns: 200px 200px 400px;
    grid-template-rows: 100px 100px 100px;
    */


/* Columns & Rows | Method 2 */
    grid-template-columns: repeat(2, 200px) 400px;
    grid-template-rows: repeat(3, 100px);

/* the first value is the grid-row-gap and the second value is the grid-column-gap.*/
   grid-gap: 30px 18px;




All the direct children of a grid container are called grid items.

Subgrid allows grid area and cells to track and inherit the row and column
 sizings of the parent grid container. 

grid area is the area that is the result of one or more grid cells.
Note that we can only have rectangular or square grid areas.
An L- or T-shaped grid area is not possible.



   //we have to do set up                            
Article 1: Rows 1 ,2, and 3 of column 1.
Article 2: Rows 1, 2, and 3 of column 2.
Article 3: Row 1 of column 3.
Article 4: Row 2 of column 3.
Article 5: Row 3 of column 3.


    C1               C2                      C3

=============================================================
=              =              =                             =
=              =              =          article-3          =    R1
=              =              =                             =
=              =               ===============================
=              =              =                             =
=   article-1  =   article-2  =          article-4          =    R2
=              =              =                             =
=              =              ===============================
=              =              =                             =
=              =              =          article-5          =   R3 
=              =              =                             =
=============================================================





   //3 things
1.Grid line numbers.
2.Named grid lines.
3.Named grid areas.



///////////////////// HTML OF THAT LAYOUT mod7_4.html ///////////////////////////////////////

     <!-- The articles block (.articles-container) is our grid container.
         All five articles (.article and article-<number>) are our grid items. -->

    <ul class="articles-container">
        <li class="article article-1">Article 1</li>
        <li class="article article-2">Article 2</li>
        <li class="article article-3">Article 3</li>
        <li class="article article-4">Article 4</li>
        <li class="article article-5">Article 5</li>
      </ul>


//////////////////// CSS OF THAT LAYOUT/////////////////////////////////////////
.articles-container {
    list-style: none;                                     /* to remove bullet points */
    margin: 40px auto;
    max-width: 1000px;
  
    display: grid;
  
    grid-template-columns: repeat(2, 200px) 400px;
    grid-template-rows: repeat(3, 100px);
  
     grid-gap: 30px 18px;
}



.article {
  color: white;
  font-family: sans-serif;
  font-size: 24px;
  padding: 20px;
  text-align: center;
}

.article-1 {
  background-color: #ef3155;                              /*  Article 1 takes Rows 1 , 2, and 3 in Column 1.*/
    grid-column-start: 1;
    grid-column-end: 2;
    grid-row-start: 1;
    grid-row-end: 4;
  }

.article-2 {
    background-color: #fc46aa;                       /* using shorthand same as .article-1  Article 2 takes up Rows 1 , 2, and 3 in Column 2.  */
    grid-column: 2 / 3;
    grid-row: 1 / 4;
  }

.article-3 {
    background-color: #fe7d68;                          /*Article 3 takes up Row 1 in Column 3  */
    grid-area: 1 / 3 / 2 / 4;                           /* row-start / column-start / row-end / column-end */
}                                                      /*grid-area property to define… grid areas!*/

.article-4 {
    background-color: #fc4c4e;                         /*Article 4 takes up Row 2 in Column 3  */
    grid-row: 2 / span 1;                              /* grid-row: 2 / span 1;==grid-row: 2 / 3;.*/
    grid-column: 3 / span 1;
  }



.article-5 {                                              /*Article 5 takes up Row 3 in Column 3  */
    background-color: #a04242;
    grid-row: 3 / -1;
    grid-column: 3 / -1;
}                                                      /*If a grid item will span all the way to the last row or column grid
                                                       line number, use -1 for your grid-column-end or grid-row-end value.
                                                        -1 stands for the last grid track line in the grid.*/



//MEDIA QUERY

/*IF diplsy width beyond 760px then apply beow instructions*/
 @media (max-width:760px ) {  
   .container{
                    flex-direction: column;
                    align-items: center;   
                        }
            .container .food{
                    background-color:rosybrown;
                    width: 400px;
                    }
          }


/* if screen went below 1200px width then apply below instructions */
@media(min-width:1200px){ 
            .container .food{
                background-color: skyblue;
            } 


        }

///NB: WE CAN DO SOME RESPONSIVE WITH FLEXBOX allows

flex-wrap: wrap;  //it will arrage continer eliments according to the screen size

mod8_1 //bootstrap
_____________________________________
//we can use online offline both
some of important practice sets
button,color,background-color,round-image,image-thumbnail,card(Card Group,Card decks etc)
navigation,(navbar=>fixed-top or fixed-bottom fixed navbar in a static position of viewport)
<!-- to give logo bar we place an image tag in place of navbar -->
layout=>Grid,Grid option
Components=> Carousel
Utilities=>Flex


bootstrap layout: Grid=>
 <!-- hamberger menu =>won't work until we use JavaScript 
 Carousel also javascript dependent
 -->
<!-- bootstrap by default makes 12 column inside row class,so if we want to make 3 division
 in each row then use .row>.col-4*3 -->    

eg:.row>.col-4.col-sm-.col-md-

 responsive:
 if Screen becomes use class-
 extremely small> col-
 small=> col-sm- 
 medium=> col-md- 
 large=> col-lg-
 extra large=> col-xl- 

eg;  row>.col-12.col-sm-12.col-md-6.col-lg-3.col-xl-6

 we can use image also instead text (img-fluid class necessary
  to set image insde column)    

  Carousel=> data-interval = time gap to slide  
      <!-- we can put Carousel inside .container to get some defautlt margin
       otherwise wew can change image size etc -->  

d-flex,flex-row,flex-column,flex-row-reverse,justify-content,align-items    etc class 
flex-md-column-reverse for medium devices ,to clealify vertical option set heigt to by an id     
align-items-center=>vertical center
justify-content-center=>horizontal center     


"btn btn-primary"
"btn btn-success"
"btn btn-danger"
"text-warning"
"text-info  bg-dark"
="p-3 mb-2  bg-success text-white">
"img-fluid  w-25 rounded-circle img-thumbnail"
"card"
"row row-cols-1 row-cols-md-3 g-4"
"nav-link disabled"
 fixed-top

 <div class="container">
  <div class="row">
    <div class="col-7">

    </div>
    <div class="col-5">
      
    </div>
  </div>
</div>

="col-12 col-sm-12 col-md-6 col-xl-3
"d-flex flex-lg-row flex-sm-column flex-md-column-reverse"
"d-flex align-items-center justify-content-center"
  <a class="nav-link" href="#backpack">Backpack</a>
  "row align-items-center"
  "col-md-7"
  "col-md-5"

="container"
 <input class="form-control" type="text"> 
        <!-- form-control to line break -->
 background-image: linear-gradient(to bottom,#FF589B 0%,#FF136F 100%);
box-shadow: 5px 5px 10px lightgray;